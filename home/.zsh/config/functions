# Color settings
ccred=$(echo -e "\033[0;31m")
ccgreen=$(echo -e "\033[0;32m")
ccyellow=$(echo -e "\033[0;33m")
ccend=$(echo -e "\033[0m")

# Rails console
rc() { bundle exec pry -r ./config/environment $@ }

# Rails server
rs() { 
  if [[ -d public/assets ]]; then
    echo "${ccred}====================="
    echo "PUBLIC ASSETS EXISTS!"
    echo "=====================${ccend}"
  fi
  rm -rf tmp/cache

  # Use puma?
  APPENDIX=""
  grep -q puma Gemfile.lock
  if [[ "$?" == "0" ]]; then
    APPENDIX="puma"
  fi
  bundle exec rails s ${APPENDIX} -b 0.0.0.0
}

# Rails server (SSL)
rssl() {
  # Check for PUMA
  grep -q puma Gemfile.lock
  [[ "$?" == "1" ]] && echo "Please add the 'puma' gem to your Gemfile and try again."
  #  On Mac do a 'brew install openssl && bundle config build.puma --with-opt-dir=/usr/local/opt/openssl' before 'bundle'" && exit 1

  puma_path=$(bundle show puma)
  grep -q SSL ${puma_path}/ext/puma_http11/Makefile

  # Check for SSL in puma
  if [[ "$?" != "0" ]]; then
    echo "${ccred}"
    echo "Your puma installation is compiled without SSL support."
    echo "To fix that:"
    echo "1. uninstall the puma gem (at least the one in ${puma_path})"
    echo "2. brew install openssl"
    echo "3. execute 'bundle config build.puma --with-opt-dir=/usr/local/opt/openssl'"
    echo "4. bundle"
    echo "${ccend}"
    return
  fi

  # Check if puma launcher patch is needed
  # The current puma launcher has no concept of SSL :(
  grep -q "c.port port" ${puma_path}/lib/rack/handler/puma.rb
  if [[ "$?" == "0" ]]; then
    echo "${ccyellow}Patching puma rack handler to make 'rails server' work with SSL."
    sed -i ".pre-ssl-patch" "s/c\.port port, host/c\.port\(port, host\) unless host == \"ssl\"/" ${puma_path}/lib/rack/handler/puma.rb
    echo "A backup of the original file was saved to:"
    echo "${puma_path}/lib/rack/handler/puma.rb.pre-ssl-patch${ccend}"
  fi

  # Check for cert/key
  # Generate a certificate
  if [ ! -e "/tmp/ssl_dev_keys/ssl_dev.key" ]; then
    mkdir /tmp/ssl_dev_keys
    openssl genrsa -des3 -out /tmp/ssl_dev_keys/ssl_dev.key -passout pass:password 2048
    openssl rsa -in /tmp/ssl_dev_keys/ssl_dev.key -passin pass:password -out /tmp/ssl_dev_keys/ssl_dev.key
    openssl req -sha256 -new -key /tmp/ssl_dev_keys/ssl_dev.key \
      -passin pass:password \
      -out /tmp/ssl_dev_keys/ssl_dev.csr \
      -subj '/C=DE/ST=Hamburg/L=Hamburg/O=nextversion/OU=IT Department/CN=localhost'
    openssl x509 -req -days 365 -in /tmp/ssl_dev_keys/ssl_dev.csr -signkey /tmp/ssl_dev_keys/ssl_dev.key -out /tmp/ssl_dev_keys/ssl_dev.crt -passin pass:password
    cat /tmp/ssl_dev_keys/ssl_dev.crt /tmp/ssl_dev_keys/ssl_dev.key > /tmp/ssl_dev_keys/ssl_dev.pem

    echo "${ccgreen}"
    echo "Generated a certificate authority and server key as /tmp/ssl_dev_keys/ssl_dev.*"
    echo "Please note that this certificate is only valid for localhost:9292!"
    echo ""
    echo "To keep the browser from displaying the 'untrusted certificate' warning"
    echo "please import ${ccyellow}/tmp/ssl_dev_keys/ssl_dev.pem${ccgreen} into your Macs keychain."
    echo ""
    echo "The Mac keychain will now open. Choose 'System' from the dropdown and import the certificate."
    echo "After importing please open the certificate (double click) and choose 'Always trust' from the first dropdown INSIDE the 'Trust' section."
    echo "${ccend}"
    echo "Press any key to continue ..."
    read
    open /tmp/ssl_dev_keys/ssl_dev.pem 
  fi

  # Check for obstruction puma configuration file
  puma_line="bind 'ssl://0.0.0.0:9292?key=/tmp/ssl_dev_keys/ssl_dev.key&cert=/tmp/ssl_dev_keys/ssl_dev.crt'"
  puma_file="config/puma/development.rb"

  if [ ! -e "${puma_file}" ]; then
    echo "${ccyellow}Creating puma SSL configuration in ${puma_file}${ccend}"
    mkdir -p config/puma
    echo "${puma_line}" > ${puma_file}
    grep -q "${puma_file}" .gitignore
    [[ "$?" != "0" ]] && echo "${puma_file}" >> .gitignore
  elif [[ "$(cat ${puma_file})" != ${puma_line}* ]]; then
    echo "${ccred}There is an puma configuration file ${puma_file}. Please remove it before continuing.${ccend}"
    return
  fi

  # Start. -b "ssl" trigger the puma handler patch.
  bundle exec rails server puma -b "ssl"
}

# ps + grep
psg() { ps auxww | grep $1 }

# Start pry (and load rails if available)
p() {
  if [ -f ./config/environment.rb ]; then
    pry -r ./config/environment -r ~/.zsh/modules/pry/rails.rb $1 $2 $3
  elif [ -f ./*.gemspec ]; then
    gem=`ls *.gemspec | cut -d "." -f 1`
    echo "Starting PRY with gem '$gem'"
    pry -Ilib -r ./lib/$gem.rb $1 $2 $3
  else
    pry
  fi
}

# bundle me happy
b() {
  bundle "$@"
}

# Find a file starting with $1 excluding .svn and color the match
f() {
  find . -name "*${@}*" | grep -v ".svn" | grep --color "${@}"
}

# Start tig in status view if unstanged changes present
ti() {
  DIRTY=$(git status -s)
  killall -m -9 tig > /dev/null 2>&1
  if [[ "$DIRTY" != "" ]]; then
    tig status
  else
    tig "$@"
  fi
}

# SSH Tunnel
tunnel() {
  ssh -f guest@$1 -L 8080:$1:80 -N
}

# Node CLI
n() {
  command -v rlwrap >/dev/null 2>&1
  if [[ "$?" == "0" ]]; then
    env NODE_NO_READLINE=1 rlwrap -p Green -S "node > " node
  else
    brew install rlwrap
    echo "************************************"
    echo "Installed rlwrap, now try 'n' again"
    echo "************************************"
  fi
}

# run rspec via spring
rspec() {
  if [ -f ./bin/rspec ]; then
    bin/rspec "$@"
  else
    bundle exec rspec "$@"
  fi
}

dirdo() {
  echo "${ccyellow}Executing '${@}' in every subdirectory${ccend}"
  for a in *; do 
    [[ -d "$a" ]] && (cd $a && echo "${ccyellow}$(pwd)${ccend} ('${@}')" && ($@) || cd ..);
  done
}

wholistens() {
  lsof -n -i4TCP:${1} | grep LISTEN
}

setgopath() {
  echo "export GOPATH=`pwd`" >> .envrc
  echo "export PATH=`pwd`/bin:$PATH" >> .envrc
}

puall() {
  LATEST_BRANCH=$(git branch --list | grep '[0-9][0-9][0-9]' | sort -r | head -n 1 | sed 's/* //g' | tr -d " ")
  git push origin master ${LATEST_BRANCH} 
}

cp2phone() {
  find . -name "${1}" -print -exec ~/Dropbox/Software/adb push -p {} /storage/sdcard1/Movies/ \;
}

# vim:ft=sh
