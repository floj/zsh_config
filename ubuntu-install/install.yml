---
- hosts: all
  become_user: root
  become_method: sudo
  vars:
    user_name: "{{ ansible_user_id }}"
    user_home: "{{ ansible_user_dir }}"
    ruby_version: "2.4.2"
    node_version: "8.9.3"

  tasks: 

  - name: "Add repository keys"
    become: true
    apt_key:
      url: "{{ item }}"
      state: present
    with_items:
      - "https://download.opensuse.org/repositories/home:manuelschneid3r/xUbuntu_17.10/Release.key"
      - "https://dl-ssl.google.com/linux/linux_signing_key.pub"
      - "https://download.docker.com/linux/ubuntu/gpg"

  - name: "Get version of latest slack client"
    set_fact:
      slack_dl_url: "{{ lookup('url', 'https://slack.com/intl/de-de/downloads/instructions/ubuntu') | regex_search('(https://downloads.slack.*?.deb)') }}"

  - name: "Download and install direct download .deb packages"
    become: true
    apt:
      deb: "{{ item }}"
      allow_unauthenticated: true
      state: present
      autoremove: true
    with_items:
      - "{{ slack_dl_url }}"
      - "http://debian.sur5r.net/i3/pool/main/s/sur5r-keyring/sur5r-keyring_2017.01.02_all.deb"
      - "https://raw.githubusercontent.com/thenoseman/zsh_config/master/ubuntu-install/udev-notify_0.1.4_all.deb"

  - name: "Add neccessary repositories"
    become: true
    apt_repository:
      repo: "{{ item }}"
      state: present
    with_items:
      - "deb [arch=amd64] https://download.docker.com/linux/ubuntu zesty stable"
      - "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
      - "deb http://download.opensuse.org/repositories/home:/manuelschneid3r/xUbuntu_{{ ansible_lsb.release }}/ /"
      - "ppa:x4121/ripgrep"
      - "ppa:linrunner/tlp"
      - "deb http://debian.sur5r.net/i3/ {{ ansible_lsb.codename }} universe"

  - name: "Install packages"
    become: true
    apt:
      name: "{{ item }}"
      update_cache: yes
      state: present
      install_recommends: no
      autoremove: true
    with_items:
      - "albert"
      - "apt-transport-https"
      - "autoconf"
      - "bison"
      - "blueman"
      - "build-essential"
      - "cmake"
      - "console-data"
      - "cryptsetup"
      - "ctags"
      - "curl"
      - "udiskie"
      - "docker-ce"
      - "ecryptfs-utils"
      - "exfat-fuse"
      - "exfat-utils"
      - "gcc-6"
      - "git"
      - "google-chrome-stable"
      - "golang"
      - "i3"
      - "i3lock"
      - "i3status"
      - "intel-microcode"
      - "keepassx"
      - "kdiff3-qt"
      - "libffi-dev"
      - "libfontconfig1-dev"
      - "libfreetype6-dev"
      - "libgdbm-dev"
      - "libgdbm3"
      - "libncurses5-dev"
      - "libreadline6-dev"
      - "libssl-dev"
      - "libyaml-dev"
      - "microcode.ctl"
      - "openconnect"
      - "parcellite"
      - "pasystray"
      - "ripgrep"
      - "tig"
      - "tlp"
      - "vim"
      - "vim-gtk3"
      - "xautolock"
      - "xclip"
      - "xdotool"
      - "zlib1g-dev"
      - "zsh"
        
  - name: "Change current user '{{ user_name }}' shell to ZSH"
    become: yes
    user:
      name: "{{ user_name }}"
      shell: "/bin/zsh"

  - name: "Clone fzf repo"
    git:
      repo: "https://github.com/junegunn/fzf.git"
      dest: "{{ user_home }}/.fzf"

  - name: "Install fzf"
    shell: "{{ user_home}}/.fzf/install --no-bash --no-fish --64 --no-update-rc --completion --no-key-bindings"

  - name: "Configure grub"
    become: yes
    lineinfile:
      path: "/etc/default/grub"
      regexp: "{{ item.regexp }}.*$"
      line: "{{ item.line }}"
    with_items:
      - { regexp: "^GRUB_HIDDEN_TIMEOUT=", line: "GRUB_HIDDEN_TIMEOUT=2"}
      - { regexp: "^GRUB_TIMEOUT=", line: "GRUB_TIMEOUT=0"}
      - { regexp: "^GRUB_CMDLINE_LINUX_DEFAULT=", line: "GRUB_CMDLINE_LINUX_DEFAULT=\"acpi_osi=Linux\""}

  - name: "Install NVM"
    shell: "git clone https://github.com/creationix/nvm.git {{ user_home }}/.nvm"
    args:
      creates: "{{ user_home }}/.nvm"

  - name: "Install node {{ node_version }} and NPM"
    shell: "nvm install {{ node_version }} --latest-npm && nvm use {{ node_version }} && nvm alias default {{ node_version }}"
    args:
      creates: "{{ user_home }}/.nvm/versions/node/v{{ node_version }}/bin/npm"

  - name: "Install global packages via NPM"
    shell: "{{ user_home }}/.nvm/versions/node/v{{ node_version }}/bin/node {{ user_home }}/.nvm/versions/node/v{{ node_version }}/bin/npm install -g {{ item }}"
    with_items:
      - "diff-so-fancy"
      - "eslint"

  - name: "Install RBENV (1/4)"
    git:
      repo: "https://github.com/rbenv/rbenv.git"
      dest: "{{ user_home }}/.rbenv"

  - name: "Install RBENV (2/4)"
    shell: "cd {{ user_home }}/.rbenv && src/configure && make -C src"
    args:
      creates: "{{ user_home }}/.rbenv/libexec/rbenv-realpath.dynlib"

  - name: "Install RBENV (3/4)"
    file: 
      path: "{{ user_home }}/.rbenv/plugins"
      state: "directory"

  - name: "Install RBENV (4/4)"
    git:
      repo: "https://github.com/rbenv/ruby-build.git"
      dest: "{{ user_home }}/.rbenv/plugins/ruby-build"

  - name: "Install ruby"
    shell: "{{ user_home}}/.rbenv/bin/rbenv install {{ ruby_version }}"
    args:
      creates: "{{ user_home}}/.rbenv/versions/{{ ruby_version }}/bin/ruby"

  - name: "Creating path for config files"
    file: 
      path: "{{ user_home }}/dev/config"
      state: "directory"

  - name: "Clone dotfiles"
    shell: "git clone {{ item.url }} {{ user_home }}/dev/config/{{ item.dest }}"
    args:
      creates: "{{ user_home }}/dev/config/{{ item.dest }}"
    with_items:
      - { url: "https://github.com/thenoseman/zsh_config.git", dest: "zsh_config" }
      - { url: "https://github.com/thenoseman/vim_config.git", dest: "vim_config" }

  - name: "Link dotfiles"
    shell: "cd {{ user_home }}/dev/config/{{ item }} && ./relink"
    with_items:
      - "zsh_config"
      - "vim_config"

  - name: "Rebuild font-cache"
    become: true
    shell: "fc-cache -f -v"

  - name: "Install udev rules"
    become: true
    template:
      src: "{{ item }}"
      dest: "/{{ item }}"
    with_items:
      - "etc/udev/rules.d/99-usb-keyboard-mac.rules"
      - "usr/local/bin/connect-apple-keyboard"
      - "usr/local/bin/connect-apple-keyboard-x"
